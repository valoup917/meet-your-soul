{"ast":null,"code":"/*\n\nconst urlsToCache = [\"index.html\"]\n\nthis.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    caches.open(cacheNames).then((cache) => {\n      console.log(\"Opend Cache\");\n      return cache.addAll(urlsToCache);\n    })\n  )\n})\n\n\nthis.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request).then((response) => {\n      // Si la réponse est présente dans le cache, la renvoyer\n      if (response) {\n        return response;\n      }\n      // Sinon, effectuer la requête, mettre en cache la réponse, puis la renvoyer\n      return fetch(event.request).then((newResponse) => {\n        // Ouvrir le cache\n        return caches.open(cacheNames).then((cache) => {\n          // Mettre en cache la réponse\n          cache.put(event.request, newResponse.clone());\n          return newResponse;\n        });\n      });\n    })\n  );\n});\n\nthis.addEventListener(\"activate\", (event) => {\n  const cacheWhiteList = [];\n  cacheWhiteList.push(cacheNames);\n  event.waitUntil(caches.keys().then((cacheNames) => Promise.all(\n    cacheNames.map((cacheName) => {\n      if (!cacheWhiteList.includes(cacheName)) {\n        return caches.delete(cacheName);\n      }\n    })\n  )))\n})\n\n*/","map":{"version":3,"names":[],"sources":["/Users/valoup/tek/tek4/Progressive_Web_Apps/meet-your-soul/src/service-worker.js"],"sourcesContent":["\n/*\n\nconst urlsToCache = [\"index.html\"]\n\nthis.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    caches.open(cacheNames).then((cache) => {\n      console.log(\"Opend Cache\");\n      return cache.addAll(urlsToCache);\n    })\n  )\n})\n\n\nthis.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request).then((response) => {\n      // Si la réponse est présente dans le cache, la renvoyer\n      if (response) {\n        return response;\n      }\n      // Sinon, effectuer la requête, mettre en cache la réponse, puis la renvoyer\n      return fetch(event.request).then((newResponse) => {\n        // Ouvrir le cache\n        return caches.open(cacheNames).then((cache) => {\n          // Mettre en cache la réponse\n          cache.put(event.request, newResponse.clone());\n          return newResponse;\n        });\n      });\n    })\n  );\n});\n\nthis.addEventListener(\"activate\", (event) => {\n  const cacheWhiteList = [];\n  cacheWhiteList.push(cacheNames);\n  event.waitUntil(caches.keys().then((cacheNames) => Promise.all(\n    cacheNames.map((cacheName) => {\n      if (!cacheWhiteList.includes(cacheName)) {\n        return caches.delete(cacheName);\n      }\n    })\n  )))\n})\n\n*/"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/* eslint-disable no-restricted-globals */import{clientsClaim}from'workbox-core';import{cacheNames}from'workbox-core/_private';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute,createHandlerBoundToURL}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate}from'workbox-strategies';clientsClaim();precacheAndRoute(self.__WB_MANIFEST);const fileExtensionRegexp=new RegExp('/[^/?]+\\\\.[^/]+$');registerRoute(// Return false to exempt requests from being fulfilled by index.html.\n_ref=>{let{request,url}=_ref;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains // a file extension, skip.\nif(url.pathname.match(fileExtensionRegexp)){return false;}// Return true to signal that we want to use the handler.\nreturn true;},createHandlerBoundToURL(process.env.PUBLIC_URL+'/index.html'));registerRoute(_ref2=>{let{url}=_ref2;return url.origin===self.location.origin&&url.pathname.endsWith('.png');},// Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({cacheName:'images',plugins:[new ExpirationPlugin({maxEntries:50})]}));self.addEventListener('message',event=>{if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});/*\n\nconst urlsToCache = [\"index.html\"]\n\nthis.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    caches.open(cacheNames).then((cache) => {\n      console.log(\"Opend Cache\");\n      return cache.addAll(urlsToCache);\n    })\n  )\n})\n\n\nthis.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request).then((response) => {\n      // Si la réponse est présente dans le cache, la renvoyer\n      if (response) {\n        return response;\n      }\n      // Sinon, effectuer la requête, mettre en cache la réponse, puis la renvoyer\n      return fetch(event.request).then((newResponse) => {\n        // Ouvrir le cache\n        return caches.open(cacheNames).then((cache) => {\n          // Mettre en cache la réponse\n          cache.put(event.request, newResponse.clone());\n          return newResponse;\n        });\n      });\n    })\n  );\n});\n\nthis.addEventListener(\"activate\", (event) => {\n  const cacheWhiteList = [];\n  cacheWhiteList.push(cacheNames);\n  event.waitUntil(caches.keys().then((cacheNames) => Promise.all(\n    cacheNames.map((cacheName) => {\n      if (!cacheWhiteList.includes(cacheName)) {\n        return caches.delete(cacheName);\n      }\n    })\n  )))\n})\n\n*/","map":{"version":3,"names":["clientsClaim","cacheNames","ExpirationPlugin","precacheAndRoute","createHandlerBoundToURL","registerRoute","StaleWhileRevalidate","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","_ref","request","url","mode","pathname","startsWith","match","process","env","PUBLIC_URL","_ref2","origin","location","endsWith","cacheName","plugins","maxEntries","addEventListener","event","data","type","skipWaiting"],"sources":["/Users/valoup/tek/tek4/Progressive_Web_Apps/meet-your-soul/src/service-worker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n\nimport { clientsClaim } from 'workbox-core';\nimport { cacheNames } from 'workbox-core/_private';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\nimport { registerRoute } from 'workbox-routing';\nimport { StaleWhileRevalidate } from 'workbox-strategies';\n\nclientsClaim();\n\nprecacheAndRoute(self.__WB_MANIFEST);\n\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute(\n  // Return false to exempt requests from being fulfilled by index.html.\n  ({ request, url }) => {\n    // If this isn't a navigation, skip.\n    if (request.mode !== 'navigate') {\n      return false;\n    } // If this is a URL that starts with /_, skip.\n\n    if (url.pathname.startsWith('/_')) {\n      return false;\n    } // If this looks like a URL for a resource, because it contains // a file extension, skip.\n\n    if (url.pathname.match(fileExtensionRegexp)) {\n      return false;\n    } // Return true to signal that we want to use the handler.\n\n    return true;\n  },\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\n);\n\nregisterRoute(\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\n  new StaleWhileRevalidate({\n    cacheName: 'images',\n    plugins: [\n      new ExpirationPlugin({ maxEntries: 50 }),\n    ],\n  })\n);\n\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n\n/*\n\nconst urlsToCache = [\"index.html\"]\n\nthis.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    caches.open(cacheNames).then((cache) => {\n      console.log(\"Opend Cache\");\n      return cache.addAll(urlsToCache);\n    })\n  )\n})\n\n\nthis.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request).then((response) => {\n      // Si la réponse est présente dans le cache, la renvoyer\n      if (response) {\n        return response;\n      }\n      // Sinon, effectuer la requête, mettre en cache la réponse, puis la renvoyer\n      return fetch(event.request).then((newResponse) => {\n        // Ouvrir le cache\n        return caches.open(cacheNames).then((cache) => {\n          // Mettre en cache la réponse\n          cache.put(event.request, newResponse.clone());\n          return newResponse;\n        });\n      });\n    })\n  );\n});\n\nthis.addEventListener(\"activate\", (event) => {\n  const cacheWhiteList = [];\n  cacheWhiteList.push(cacheNames);\n  event.waitUntil(caches.keys().then((cacheNames) => Promise.all(\n    cacheNames.map((cacheName) => {\n      if (!cacheWhiteList.includes(cacheName)) {\n        return caches.delete(cacheName);\n      }\n    })\n  )))\n})\n\n*/"],"mappings":"AAAA,0CAEA,OAASA,YAAY,KAAQ,cAAc,CAC3C,OAASC,UAAU,KAAQ,uBAAuB,CAClD,OAASC,gBAAgB,KAAQ,oBAAoB,CACrD,OAASC,gBAAgB,CAAEC,uBAAuB,KAAQ,oBAAoB,CAC9E,OAASC,aAAa,KAAQ,iBAAiB,CAC/C,OAASC,oBAAoB,KAAQ,oBAAoB,CAEzDN,YAAY,CAAC,CAAC,CAEdG,gBAAgB,CAACI,IAAI,CAACC,aAAa,CAAC,CAEpC,KAAM,CAAAC,mBAAmB,CAAG,GAAI,CAAAC,MAAM,CAAC,kBAAkB,CAAC,CAC1DL,aAAa,CACX;AACAM,IAAA,EAAsB,IAArB,CAAEC,OAAO,CAAEC,GAAI,CAAC,CAAAF,IAAA,CACf;AACA,GAAIC,OAAO,CAACE,IAAI,GAAK,UAAU,CAAE,CAC/B,MAAO,MAAK,CACd,CAAE;AAEF,GAAID,GAAG,CAACE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAAC,CAAE,CACjC,MAAO,MAAK,CACd,CAAE;AAEF,GAAIH,GAAG,CAACE,QAAQ,CAACE,KAAK,CAACR,mBAAmB,CAAC,CAAE,CAC3C,MAAO,MAAK,CACd,CAAE;AAEF,MAAO,KAAI,CACb,CAAC,CACDL,uBAAuB,CAACc,OAAO,CAACC,GAAG,CAACC,UAAU,CAAG,aAAa,CAChE,CAAC,CAEDf,aAAa,CACXgB,KAAA,MAAC,CAAER,GAAI,CAAC,CAAAQ,KAAA,OAAK,CAAAR,GAAG,CAACS,MAAM,GAAKf,IAAI,CAACgB,QAAQ,CAACD,MAAM,EAAIT,GAAG,CAACE,QAAQ,CAACS,QAAQ,CAAC,MAAM,CAAC,GAAE;AACnF,GAAI,CAAAlB,oBAAoB,CAAC,CACvBmB,SAAS,CAAE,QAAQ,CACnBC,OAAO,CAAE,CACP,GAAI,CAAAxB,gBAAgB,CAAC,CAAEyB,UAAU,CAAE,EAAG,CAAC,CAAC,CAE5C,CAAC,CACH,CAAC,CAEDpB,IAAI,CAACqB,gBAAgB,CAAC,SAAS,CAAGC,KAAK,EAAK,CAC1C,GAAIA,KAAK,CAACC,IAAI,EAAID,KAAK,CAACC,IAAI,CAACC,IAAI,GAAK,cAAc,CAAE,CACpDxB,IAAI,CAACyB,WAAW,CAAC,CAAC,CACpB,CACF,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}